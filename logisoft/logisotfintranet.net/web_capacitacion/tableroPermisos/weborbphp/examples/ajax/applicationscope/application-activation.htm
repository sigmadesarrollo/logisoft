<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>WebORB Presentation Server AJAX Client Examples - Application Activation for Server objects</title>
<script language="javascript" src="WebORB.js"></script>
<script>
	var proxy;

	function invokeServer( syncMode )
	{
		/*
		 * Create a proxy to the instance of the weborb.examples.activation.application.VisitorInfo class.
		 * Notice the "?activate=application" parameter in the server URL. By adding the parameter, the client
		 * requests application activation of the requested object. With application activation only one instance
		 * of the class will be created per application. As a result, any state maintained in the object will
		 * be shared between all clients.
		 */
		proxy = webORB.bind( "Weborb.Examples.VisitorInfo", "weborb.php");
		var responseObj;

		/*
		 * If the user requests a synchronous invocation, just invoke the method on the proxy object.
		 * Otherwise, pass Async object containing the callback function. The callback function (handleResponse)
		 * will be called when the response becomes available from the server.
		 */
		if( syncMode )
		{
			responseObj = proxy.getVisitorsInfo();
			handleResponse( responseObj );
		}
		else
		{
			proxy.getVisitorsInfo( new Async( handleResponse ) );
		}
	}

	/*
	 * Process the response here. The server's method returns a Hashtable which then is translated
	 * to an associative array on the client (javascript) side. Each field in the hashtable becomes
	 * a field in the associative array.
	 * Extract all the data from the response and render it using DHTML
	 */
	function handleResponse( responseObj )
	{
		var totalHits = responseObj.totalHits;
		var totalHitsHolder = document.getElementById( "totalHitsHolder" );
		totalHitsHolder.innerHTML = "<b><center>" + totalHits + "</center></b>";

		var tableObj = document.createElement( "TABLE" );
		var tBodyObj = document.createElement( "TBODY" );

		tableObj.appendChild( tBodyObj );
		tableObj.border = "1px";
		tableObj.cellSpacing = 0;
		tableObj.cellPadding = 5;
		tableObj.style.borderCollapse = "collapse"
		tableObj.style.borderStyle = "solid";
		tableObj.borderColor = "#C0C0C0";

		for( var name in responseObj )
		{
			if( name == "totalHits" )
				continue;

			var rowObj = document.createElement( "TR" );
			tBodyObj.appendChild( rowObj );

			var cellObjBrowser = document.createElement( "TD" );
			cellObjBrowser.innerHTML = "<font size='2'>" + name + "</font>";

			var cellObjBrowserCount = document.createElement( "TD" );
			cellObjBrowserCount.innerHTML = "<b><center>" + responseObj[ name ] + "</center></b>";

			rowObj.appendChild( cellObjBrowser );
			rowObj.appendChild( cellObjBrowserCount );
		}

		var dynamicTableContent = document.getElementById( "dynamicTableContent" );

		if( dynamicTableContent.childNodes.length > 0 )
			dynamicTableContent.replaceChild( tableObj, dynamicTableContent.firstChild );
		else
			dynamicTableContent.appendChild( tableObj );
	}

</script>
</head>

<body style="font-family: Tahoma; font-size: 10pt; border-collapse:collapse" onLoad="invokeServer();">

<table border="0" cellpadding="0" cellspacing="0" bordercolor="#111111" id="AutoNumber1">
  <tr>
    <td>
    <img border="0" src="../../../images/topCornLeft.gif" width="9"></td>
    <td background="../../../images/topMid.gif"></td>
    <td width="12">
    <img border="0" src="../../../images/rightCornTop.gif" width="12"></td>
  </tr>
  <tr>
    <td background="../../../images/leftSide.gif" width="9"></td>
    <td>
    <table cellpadding="3" cellspacing="3" style="border-collapse: collapse; padding: 1" bordercolor="#111111" width="600" id="AutoNumber2">
      <tr>
        <td bordercolor="#C0C0C0" width="374">
        <font face="Tahoma" size="2"><b>WebORB Presentation Server</b><br>
        </font><font face="Tahoma" size="1">AJAX Client Examples</font></td>
        <td style="border-style:dotted; border-width:1; padding:1; " bordercolor="#C0C0C0" width="204">
        <p align="center"><font face="Tahoma" size="2">Application Activation
        Example</font></td>
      </tr>
      <tr>
        <td style="border-left-width: 1; border-right-width: 1; border-top-width: 1; border-bottom-style: solid; border-bottom-width: 1" bordercolor="#C0C0C0" width="578" colspan="2"></td>
      </tr>
      <tr>
        <td width="375" align="center" valign="top"><br>
        <table bordercolor="#C0C0C0" id="AutoNumber3" cellpadding="3" border="1" cellspacing="0">
          <tr>
            <td bgcolor="#FFFFCC" colspan="2"><font face="Tahoma" size="2">
            Server responded:</font></td>
          </tr>
          <tr>
            <td>
            <p align="left"><b><font size="2">Total hits:</font></b></td>
            <td>
            <p align="center"><DIV ID="totalHitsHolder"></DIV></td>
          </tr>
          <tr>
            <td colspan="2"><b><font size="2">Hits by browser type:</font></b></td>
          </tr>
          <tr>
            <td colspan="2" style="border-style: solid; border-width: 0; padding: 0"><DIV ID="dynamicTableContent"></DIV></td>
          </tr>
        </table>
            <form method="POST" action="--WEBBOT-SELF--" onSubmit="location.href='_derived/nortbots.htm';return false;" webbot-onSubmit>
              <p align="center">
              <input type="button" value="Send Sync Request" name="SendRequestButton" style="width: 150" onClick="invokeServer( true )">
              <input type="button" value="Send Async Request" name="SendRequestButton2" style="width: 150" onClick="invokeServer( false )"></p>
            </form>

        </td>
        <td width="204" align="left" valign="top" bordercolor="#C0C0C0" style="border-left-style: dotted; border-left-width: 1; border-right-width: 1; border-top-width: 1; border-bottom-width: 1; padding-left: 6; border-right-style:dotted; padding-right:6">
        <font face="Tahoma" style="font-size: 8pt">
        <b>Instructions:</b><br>
        </font><font style="font-size: 8pt">Click the buttons on the left to see numbers
        updated with every request. Open this page in a new browser. The numbers
        are still increasing which indicates the server continues to maintain
        its state for all connected clients.<br>
        <br>
        </font><font face="Tahoma" style="font-size: 8pt">
        <b>Notes:</b><br>
        In this example, WebORB</font><font style="font-size: 8pt">™</font><font face="Tahoma" style="font-size: 8pt">
        Rich Client System</font><font style="font-size: 8pt">™</font><font face="Tahoma" style="font-size: 8pt">
        makes a service invocation on
        an object with application activation. Since there is only one instance
        of the object, all the state and data contained in will be shared across
        the entire application. As a result, all connected clients (both AJAX
        and Flash) will get the same view onto the data. </font>
        <font style="font-size: 8pt">
        <br>
        <br>
        <b>Implementation:</b><br>
        When the page loads or user clicks one of the buttons on the right, the
        client creates a proxy to a server-side object with application
        activation and invokes the <font face="Courier New">getVisitorInfo()</font>
        method. The method returns a collection of statistics for all clients that
        had invoked
        that method. Method's implementation returns The collection  as a hashtable.  Rich Client
        System™ presents the hashtable to the JavaScript program as an anonymous
        JS object. The script then iterates over the fields in the object and
        dynamically populates table on the left. </font></td>
      </tr>
      <tr>
        <td width="579" align="center" valign="top" colspan="2" bordercolor="#C0C0C0" style="border-style:dotted; border-width:1; padding:6; ">
        <p align="left"><b><font style="font-size: 9pt">Code review:</font></b><font style="font-size: 9pt"><br>
        <br>
        The client imports the JavaScript library of the Rich Client System™:</font></p>
        <div align="center">
          <center>
          <table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse" bordercolor="#C0C0C0" width="90%" id="AutoNumber4" bgcolor="#FFFFCC">
            <tr>
              <td width="100%" bordercolor="#C0C0C0">
              <p align="left">
        <font face="Courier New" size="2">&lt;script language=&quot;javascript&quot; src=&quot;<b>WebORB.js</b>&quot;&gt;&lt;/script&gt;</font></td>
            </tr>
          </table>
          </center>
        </div>
        <p align="left"><font style="font-size: 9pt">The client uses WebORB™ object binding API to
        create a proxy to the server-side object. The method call takes 2
        arguments: name of the class for which an object should be created, URL
        of the WebORB server:</font></p>
        <table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse" bordercolor="#C0C0C0" width="90%" id="AutoNumber5" bgcolor="#FFFFCC">
          <tr>
            <td width="100%" bordercolor="#C0C0C0">
            <p align="left"><font face="Courier New" size="2">proxy =
        webORB.bind(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;weborb.examples.activation.application.VisitorInfo&quot;,
        &quot;weborb.php<!-- b>?activate=application</b-->&quot; );</font></td>
          </tr>
        </table>
        <!-- p align="left"><font style="font-size: 9pt">Notice the &quot;?activate=application&quot; at the end of
        the server URL. The query parameter signals to WebORB that the instance
        of the VisitorInfo class must be obtained using the application
        activation mode. That means that only one instance of the class will be
        created in the application. Once it is created, any subsequent requests
        will be invoking methods on that specific instance. As a result, any
        state contained in the object will be shared for all clients of the
        application.<br-->
        <br>
        To issue an invocation, the client simply calls the method available in
        the VisitorInfo class. This example demonstrates both synchronous and
        asynchronous invocations. To invoke synchronously, just call the method.
        For the asynchronous invocation, make sure to pass an instance of the
        Async class, which contains the callback function. The callback function
        will be invoked when a response becomes available:</font></p>
        <table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse" bordercolor="#C0C0C0" width="90%" id="AutoNumber6" bgcolor="#FFFFCC">
          <tr>
            <td width="100%" bordercolor="#C0C0C0">
            <p align="left"><font face="Courier New" size="2">if( syncMode )<br>
            {<br>
&nbsp;&nbsp;&nbsp; responseObj = proxy.<b>getVisitorsInfo()</b>;<br>
&nbsp;&nbsp;&nbsp; handleResponse( responseObj );<br>
            }<br>
            else<br>
            {<br>
&nbsp;&nbsp;&nbsp; proxy.<b>getVisitorsInfo(</b> <b>new Async</b>(
            handleResponse ) <b>)</b>;<br>
            }</font></td>
          </tr>
        </table>
        <p align="left"><span style="font-size: 9pt; font-weight: 700">
        Server-side class:<br>
        <br>
        <p align="left"><span style="font-weight: 700; font-size: 9pt">PHP</span><span style="font-size: 9pt; font-weight: 700">: 
        </span></p>
        <table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse" bordercolor="#C0C0C0" width="90%" id="AutoNumber8" bgcolor="#FFFFCC">
          <tr>
            <td width="100%" bordercolor="#C0C0C0">
            <font face="Courier New"><font style="font-size: 9pt">// copyright
            2003 - 2009 Midnight Coders, LLC <br>
            class VisitorInfo
	{<br>
        &nbsp;&nbsp;&nbsp;public /*int*/ $totalHits = 0;<br>
        &nbsp;&nbsp;&nbsp;public /*Hashtable*/ $browserTypes = array();<br><br>
        
        &nbsp;&nbsp;&nbsp;public /*Hashtable*/function getVisitorsInfo()<br>
        &nbsp;&nbsp;&nbsp;{<br>
        	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Cache::get("VisitorInfo") != null)<br>
        	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
        		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$visitorInfo = Cache::get("VisitorInfo");<br>
        		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this->totalHits = $visitorInfo->totalHits;<br>
        		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this->browserTypes = $visitorInfo->browserTypes;<br>
        	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>
        	
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this->totalHits++;<br><br>

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$userAgent = $_SERVER['HTTP_USER_AGENT'];<br><br>

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if( !array_key_exists($userAgent, $this->browserTypes ) )<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this->browserTypes[ $userAgent ] = 0;<br><br>

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*int*/ $browserTypeHits = $this->browserTypes[ $userAgent ];<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this->browserTypes[ $userAgent ] = $browserTypeHits + 1;<br><br>

           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Hashtable*/ $result = array();<br>           
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$result[ "totalHits" ] = $this->totalHits;<br><br>
            
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach( $this->browserTypes as $key => $value )<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$result[ $key ] = $value;<br><br>
                
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cache::put("VisitorInfo", $this);<br><br>
			
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $result;<br>
        &nbsp;&nbsp;&nbsp;}<br><br>
       
	}</font></font></td>
          </tr>
        </table>
        </td>
      </tr>
      <tr>
        <td width="579" align="center" valign="top" colspan="2"><font size="1">
        Copyright <span style="font-family:''">© Midnight Coders, Inc, 2003-2008. All
        Rights Reserved</span></font></td>
      </tr>
    </table>
    </td>
    <td background="../../../images/rightMid.gif"></td>
  </tr>
  <tr>
    <td>
    <img border="0" src="../../../images/leftCornBot.gif" width="9" height="10"></td>
    <td background="../../../images/botMid.gif"></td>
    <td>
    <img border="0" src="../../../images/botCornLeft.gif" width="12" height="10"></td>
  </tr>
</table>

</body>

</html>